syntax enable

" Vundle
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" :PluginList
" :PluginInstall
set nocompatible 
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required! 
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Plugin 'vim-erlang/vim-erlang-runtime'
Plugin 'vim-erlang/vim-erlang-compiler'
Plugin 'vim-erlang/vim-erlang-omnicomplete'
Plugin 'vim-erlang/vim-erlang-tags'
Plugin 'altercation/vim-colors-solarized'
Plugin 'othree/xml.vim'
Plugin 'klen/python-mode'
Plugin 'tpope/vim-unimpaired'
Plugin 'tbjurman/vim-lux'

call vundle#end()
filetype plugin indent on  " required for vundle

" CtrlP settings
let g:ctrlp_working_path_mode= 'a'

" NERDTree
nnoremap <C-n> :NERDTreeToggle<CR>

set is " incsearch, i.e. show partial matches when typing
set hlsearch " hightligh searches
set ignorecase
set smartcase

" Status bar
set statusline=%F%m%r%h%w\ [%p%%]\ [LEN=%L]
set laststatus=2

"====[ Make the 121st column stand out ]====================
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%121v', 100)

" Indent 2 spaces
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

" Keep 4 spaces in some code
autocmd FileType java set tabstop=4|set shiftwidth=4

autocmd BufNewFile,BufRead *lux set tabstop=4|set shiftwidth=4|set list

set number " show linenumbers
set nowrap " no wrapping

set backupdir=/tmp/
set directory=/tmp/

set backspace=indent,eol,start

" Tab navigation
nnoremap <C-k>  :tabfirst<CR>
nnoremap <C-l>  :tabnext<CR>
nnoremap <C-h>  :tabprev<CR>
nnoremap <C-j>  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

"====[ Swap : and ; to make colon commands easier to type ]======
nnoremap ; :
nnoremap : ;

"====[ Swap v and CTRL-V, because Block mode is more useful that Visual mode ==

nnoremap    v   <C-V>
nnoremap <C-V>     v

vnoremap    v   <C-V>
vnoremap <C-V>     v

" Fix indent of public/private/protected in classes
set cinoptions=g0

" Map F4 to search in files
nnoremap <F4> :execute 'grep -r ' . expand('<cword>') . ' *'<CR>
nnoremap <F3> :cn<CR>

" Map F5 to underline text, normal and insert mode
nnoremap <F5> yyp<c-v>$r-
inoremap <F5> <Esc>yyp<c-v>$r-A

" Yang syntax (place in ~/.vim/syntax)
au BufRead,BufNewFile *.yang setfiletype yang
au FileType yang :syntax sync fromstart

au BufRead,BufNewFile *.erl set cursorline

" Set textwidth 80 in text files
au BufRead,BufNewFile *txt set tw=80

" 256 colors
set t_Co=256

" Ignore whitespace in diff
if &diff
      " diff mode
      set diffopt+=iwhite
endif

let mapleader=","


""""""""""""""""""""
" Python
""""""""""""""""""""
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" " ]]            Jump on next class or function (normal, visual, operator modes)
" " [M            Jump on previous class or method (normal, visual, operator modes)
" " ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0
